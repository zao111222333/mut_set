name: build

# This should ensure that the workflow won't run on `dev-*` branches, but will
# otherwise execute on any other branch and any pull request (including PRs
# from dev branches).
on:
  push:
    branches-ignore:
      - 'dev-*'
  pull_request:
    branches:
      - '*'

env:
  CARGO_TERM_COLOR: always
  # A fixed version used for testing, so that the builds don't
  # spontaneously break after a few years.
  # Make sure to update this from time to time.
  RUST_VERSION: "1.80.0"
jobs:
  # Checks syntax formatting.
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt
      - run: cargo fmt --all -- --check

  # Run basic code validity check.
  check:
    needs: fmt
    name: Check
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      - run: cargo check --all-features

  # Run tests.
  test:
    needs: check
    name: Test Suite (linux)
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt
      - name: Build
        run: cargo build --verbose
      - name: Run tests1
        run: cargo test --verbose --all-features --lib
      - name: Run tests2
        run: cargo test --verbose --all-features --lib --package tests
  # Checks code style.
  clippy:
    needs: check
    name: Clippy
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-A clippy::missing_docs -D warnings"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy
      - run: cargo clippy --all-features
      - run: cargo clippy --all-features --package tests

  # Compute code coverage
  codecov:
    needs: test
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      # Install action using cargo-binstall, which is faster because we don't have to compile tarpaulin every time.
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin
      - run: cargo tarpaulin --verbose --lib --examples --all-features --out xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: cobertura.xml